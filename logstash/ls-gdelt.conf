input {
    file {
        type => "events"
        tags => ["events"]
        path => "${GDELT_REALTIME_FILE_PATH}"
        start_position => "beginning"

        sincedb_path => "/dev/null"
        ignore_older => 0
    }

    file {
        type => "gkg"
        tags => ["gkg"]
        path => "${GDELT_REALTIME_GKG_FILE_PATH}"
        start_position => "beginning"

        sincedb_path => "/dev/null"
        ignore_older => 0
    }

    file {
        type => "mentions"
        tags => ["mentions"]
        path => "${GDELT_REALTIME_MENTIONS_FILE_PATH}"
        start_position => "beginning"

        sincedb_path => "/dev/null"
        ignore_older => 0
    }
}

filter {
    if "events" in [tags] {
       grok {
            match => { "message" => "%{DATA:GlobalEventID:int}?	%{DATA:Day}	%{INT:MonthYear:int}?	%{INT:Year:int}?	%{NUMBER:FractionDate:float}?	%{DATA:Actor1Code}	%{DATA:Actor1Name}	%{DATA:Actor1CountryCode}	%{DATA:Actor1KnownGroupCode}	%{DATA:Actor1EthnicCode}	%{DATA:Actor1Religion1Code}	%{DATA:Actor1Religion2Code}	%{DATA:Actor1Type1Code}	%{DATA:Actor1Type2Code}	%{DATA:Actor1Type3Code}	%{DATA:Actor2Code}	%{DATA:Actor2Name}	%{DATA:Actor2CountryCode}	%{DATA:Actor2KnownGroupCode}	%{DATA:Actor2EthnicCode}	%{DATA:Actor2Religion1Code}	%{DATA:Actor2Religion2Code}	%{DATA:Actor2Type1Code}	%{DATA:Actor2Type2Code}	%{DATA:Actor2Type3Code}	%{NONNEGINT:IsRootEvent:int}?	%{DATA:EventCode}	%{DATA:EventBaseCode}	%{DATA:EventRootCode}	%{INT:QuadClass:int}?	%{NUMBER:GoldsteinScale:float}?	%{NONNEGINT:NumMentions:int}?	%{NONNEGINT:NumSources:int}?	%{NONNEGINT:NumArticles:int}?	%{DATA:AvgTone:float}?	%{NONNEGINT:Actor1Geo_Type:int}?	%{DATA:Actor1Geo_Fullname}	%{DATA:Actor1Geo_CountryCode}	%{DATA:Actor1Geo_ADM1Code}	%{DATA:Actor1Geo_ADM2Code}	%{NUMBER:Actor1Geo_Lat:float}?	%{NUMBER:Actor1Geo_Long:float}?	%{DATA:Actor1Geo_FeatureID}	%{NONNEGINT:Actor2Geo_Type:int}?	%{DATA:Actor2Geo_Fullname}	%{DATA:Actor2Geo_CountryCode}	%{DATA:Actor2Geo_ADM1Code}	%{DATA:Actor2Geo_ADM2Code}	%{NUMBER:Actor2Geo_Lat:float}?	%{NUMBER:Actor2Geo_Long:float}?	%{DATA:Actor2Geo_FeatureID}	%{NONNEGINT:ActionGeo_Type:int}?	%{DATA:ActionGeo_Fullname}	%{DATA:ActionGeo_CountryCode}	%{DATA:ActionGeo_ADM1Code}	%{DATA:ActionGeo_ADM2Code}	%{NUMBER:ActionGeo_Lat:float}?	%{NUMBER:ActionGeo_Long:float}?	%{DATA:ActionGeo_FeatureID}	%{DATA:DateAdded}	(?:%{URI:SourceURL}|%{DATA:SourceURL})" }
            tag_on_failure => ['grok-failed']
        }
    
        date {
            locale => "en"
            match => ["DateAdded", "yyyyMMddHHmmss"]
            timezone => "UTC"
        }

        mutate {
            remove_field => [ "message", "host" ]
        }

        if [ActionGeo_Lat]{
            mutate {
                add_field => {
                    "[location][lat]" => "%{ActionGeo_Lat}"
                    "[location][lon]" => "%{ActionGeo_Long}"
                }
            }
        }
    } else if "mentions" in [tags] {

        grok {
            match => { "message" => "%{DATA:GlobalEventID}	%{DATA:EventTimeDate}	%{DATA:MentionTimeDate}	%{INT:MentionType}	%{DATA:MentionSourceName}	%{DATA:MentionIdentifier}	%{INT:SentenceID}	%{INT:Actor1CharOffset}	%{INT:Actor2CharOffset}	%{INT:ActionCharOffset}	%{INT:InRawText}	%{INT:Confidence}	%{INT:MentionDocLen}	%{DATA:MentionDocTone}	%{DATA:MentionDocTranslationInfo}	%{DATA:Extras}" }
            tag_on_failure => ['grok-failed']
        }

        date {
            locale => "en"
            match => ["EventTimeDate", "yyyyMMddHHmmss"]
            timezone => "UTC"
        }

        date {
            target => "MentionTimeDate"
            locale => "en"
            match => ["MentionTimeDate", "yyyyMMddHHmmss"]
            timezone => "UTC"
        }

        mutate {
            convert => { "MentionType" => "integer" }
            convert => { "Confidence" => "integer" }
            convert => { "MentionDocLen" => "integer" }
            convert => { "InRawText" => "integer" }
            convert => { "ActionCharOffset" => "integer" }
            convert => { "Actor2CharOffset" => "integer" }
            convert => { "Actor1CharOffset" => "integer" }
            convert => { "SentenceID" => "integer" }
            convert => { "MentionDocTone" => "float" }
        }

        mutate {
            remove_field => [ "message", "host" ]
        }

    } else if "gkg" in [tags] {

        grok {
            match => { "message" => "%{DATA:GlobalEventID}	%{DATA:Date21}	%{INT:SourceCollectionId2}	%{DATA:SourceCommonName2}	%{URI:DocIdentifier2}	%{DATA:Counts1}	%{DATA:Counts21}	%{DATA:Themes1}	%{DATA:EnhancedThemes2}	%{DATA:Locations1}	%{DATA:EnhancedLocations}	%{DATA:Persons1}	%{DATA:EnhancedPersons2}	%{DATA:Organizations1}	%{DATA:EnhancedOrganizations2}	%{DATA:Tone15}	%{DATA:EnhancedDates21}	%{DATA:GCAM2}	%{DATA:SharingImage21}	%{DATA:RelatedImages21}	%{DATA:SocialImageEmbeds21}	%{DATA:SocialVideoEmdeds21}	%{DATA:Quotations21}	%{DATA:AllNames21}	%{DATA:Amounts21}	%{DATA:TranslationInfo21}	%{GREEDYDATA:ExtrasXML2}" }
            tag_on_failure => ['grok-failed']
        }

        date {
            locale => "en"
            match => ["Date21", "yyyyMMddHHmmss"]
            timezone => "UTC"
        }

        mutate {
            split => { "Counts21" => ";" }
            split => { "Themes1" => ";" }
            split => { "EnhancedThemes2" => ";" }
            split => { "Locations1" => ";" }
            split => { "EnhancedLocations" => ";" }
            split => { "Persons1" => ";" }
            split => { "EnhancedPersons2" => ";" }
            split => { "Organizations1" => ";" }
            split => { "EnhancedOrganizations2" => ";" }
            split => { "EnhancedDates21" => ";" }
            split => { "RelatedImages21" => ";" }
            split => { "SocialImageEmbeds21" => ";" }
            split => { "SocialVideoEmdeds21" => ";" }
            split => { "AllNames21" => ";" }
            split => { "Amounts21" => ";" }
            split => { "Quotations21" => "#" }
            split => { "Tone15" => "," }

            add_field => { "Tone" => "%{[Tone15][0]}" }
            add_field => { "PositiveScore" => "%{[Tone15][1]}" }
            add_field => { "NegativeScore" => "%{[Tone15][2]}" }
            add_field => { "Polarity" => "%{[Tone15][3]}" }
            add_field => { "ActivityReferenceDensity" => "%{[Tone15][4]}" }
            add_field => { "GroupReferenceDensity" => "%{[Tone15][5]}" }
            add_field => { "WordCount" => "%{[Tone15][6]}" }
        }

        mutate {
            convert => { "Tone" => "float" }
            convert => { "PositiveScore" => "float" }
            convert => { "NegativeScore" => "float" }
            convert => { "Polarity" => "float" }
            convert => { "ActivityReferenceDensity" => "float" }
            convert => { "GroupReferenceDensity" => "float" }
            convert => { "WordCount" => "integer" }
        }

        ruby {
              code => "
                    if event.get('Counts21')
                        r = []
                        i = 1
                        event.get('Counts21').each { |values|
                            data = values.split('#')
                            item = {
                                'Order' => i,
                                'Type' => data[0],
                                'Count' => data[1].to_i,
                                'ObjectType' => data[2],
                                'LocationType' => data[3],
                                'LocationFullName' => data[4],
                                'LocationCountryCode' => data[5],
                                'LocationADM1Code' => data[6],
                                'location' => {
                                    'lat' => data[7].to_f,
                                    'lon' => data[8].to_f,
                                },
                                'LocationFeatureId' => data[9],
                                'Offset' => data[10].to_i
                            }
                            r << item
                            i += 1
                        }
                        event.set('Counts21Objects', r)
                    end
              "
        }

        ruby {
           code => "
            if event.get('EnhancedThemes2')
                r = []
                i = 1
                event.get('EnhancedThemes2').each { |values|
                    data = values.split(',')
                    item = {
                        'Order' => i,
                        'Theme' => data[0],
                        'Offset' => data[1].to_i
                    }
                    r << item
                    i += 1
                }
                event.set('EnhancedThemes2Objects', r)
            end
          "
        }

        ruby {
              code => "
                    if event.get('EnhancedLocations')
                        r = []
                        i = 1
                        event.get('EnhancedLocations').each { |values|
                            data = values.split('#')
                            item = {
                                'Order' => i,
                                'Type' => data[0].to_i,
                                'LocationFullName' => data[1],
                                'LocationCountryCode' => data[2],
                                'LocationADM1Code' => data[3],
                                'LocationADM2Code' => data[4],
                                'location' => {
                                    'lat' => data[5].to_f,
                                    'lon' => data[6].to_f,
                                },
                                'LocationFeatureId' => data[7],
                                'Offset' => data[8].to_i
                            }
                            r << item
                            i += 1
                        }
                        event.set('EnhancedLocationsObjects', r)
                    end
              "
        }

        ruby {
              code => "
                    if event.get('EnhancedPersons2')
                        r = []
                        event.get('EnhancedPersons2').each { |values|
                            data = values.split(',')
                            item = {
                                'Name' => data[0],
                                'Offset' => data[1].to_i
                            }
                            r << item
                        }
                        event.set('EnhancedPersons2Objects', r)
                    end
              "
        }

        ruby {
              code => "
                    if event.get('EnhancedOrganizations2')
                        r = []
                        event.get('EnhancedOrganizations2').each { |values|
                            data = values.split(',')
                            item = {
                                'Name' => data[0],
                                'Offset' => data[1].to_i
                            }
                            r << item
                        }
                        event.set('EnhancedOrganizations2Objects', r)
                    end
              "
        }


        ruby {
              code => "
                    if event.get('EnhancedDates21')
                        r = []
                        event.get('EnhancedDates21').each { |values|
                            data = values.split('#')
                            item = {
                                'DateResolution' => data[0].to_i,
                                'Month' => data[1].to_i,
                                'Day' => data[2].to_i,
                                'Year' => data[3].to_i,
                                'Offset' => data[4].to_i,
                            }
                            r << item
                        }
                        event.set('EnhancedDates21Objects', r)
                    end
              "
        }

        ruby {
              code => "
                    if event.get('Quotations21')
                        r = []
                        i = 1
                        event.get('Quotations21').each { |values|
                            data = values.split('|')
                            item = {
                                'Order' => i,
                                'Offset' => data[0].to_i,
                                'Length' => data[1].to_i,
                                'Verb' => data[2],
                                'Quote' => data[3],
                            }
                            r << item
                            i += 1
                        }
                        event.set('Quotations21Objects', r)
                    end
              "
        }

        ruby {
              code => "
                    if event.get('AllNames21')
                        r = []
                        i = 1
                        event.get('AllNames21').each { |values|
                            data = values.split(',')
                            item = {
                                'Order' => i,
                                'Name' => data[0],
                                'Offset' => data[1].to_i,
                            }
                            r << item
                            i += 1
                        }
                        event.set('AllNames21Objects', r)
                    end
              "
        }

        ruby {
              code => "
                    if event.get('Amounts21')
                        r = []
                        event.get('Amounts21').each { |values|
                            data = values.split(',')
                            item = {
                                'Amount' => data[0].to_f,
                                'Object' => data[1],
                                'Offset' => data[2].to_i,
                            }
                            r << item
                        }
                        event.set('Amounts21Objects', r)
                    end
              "
        }

        mutate {
            remove_field => [
                "message", "GCAM2", "Counts1", "host",
                "Amounts21", "AllNames21", "Quotations21", "EnhancedDates21",
                "EnhancedOrganizations2", "EnhancedPersons2",
                "EnhancedLocations", "EnhancedThemes2", "Counts21", "Locations1", "Tone15"
            ]
        }
    }

}

output{

#    stdout { codec => rubydebug }

    elasticsearch {
        hosts => ['${ES_HOST}']
        user => '${ES_USER}'
        password => '${ES_PASSWORD}'
        index => '${ES_GDELT_INDEX}-%{type}'
        document_id => '%{GlobalEventID}'
        document_type => '%{type}'
    }

}
